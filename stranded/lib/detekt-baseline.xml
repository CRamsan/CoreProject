<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:Game.kt$Game$internal suspend fun processNightEvent(nightEvent: NightEvent)</ID>
    <ID>ComplexMethod:GameStateExtensions.kt$ internal fun MutableStrandedGameState.processEvent( change: StrandedStateChange, multiplayerGameEventHandler: MultiplayerGameEventHandler? = null, eventHandler: GameEventHandler? = null, ): StrandedGameState</ID>
    <ID>EmptyDefaultConstructor:ScavengeResult.kt$ScavengeResult$()</ID>
    <ID>EmptyFunctionBlock:Game.kt$Game${ }</ID>
    <ID>LongMethod:Game.kt$Game$internal suspend fun processNightEvent(nightEvent: NightEvent)</ID>
    <ID>LongMethod:GameStateExtensions.kt$ internal fun MutableStrandedGameState.processEvent( change: StrandedStateChange, multiplayerGameEventHandler: MultiplayerGameEventHandler? = null, eventHandler: GameEventHandler? = null, ): StrandedGameState</ID>
    <ID>NestedBlockDepth:Game.kt$Game$internal suspend fun processNightEvent(nightEvent: NightEvent)</ID>
    <ID>TooManyFunctions:GameStateExtensions.kt$com.cramsan.stranded.lib.game.logic.GameStateExtensions.kt</ID>
    <ID>UndocumentedPublicClass:CardHolder.kt$CardHolder&lt;T : Card></ID>
    <ID>UndocumentedPublicClass:CardRepository.kt$CardRepository</ID>
    <ID>UndocumentedPublicClass:DeckHolder.kt$DeckHolder</ID>
    <ID>UndocumentedPublicClass:GameEventHandler.kt$GameEventHandler</ID>
    <ID>UndocumentedPublicClass:GameScope.kt$GameScope</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$CancellableByFire : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$CancellableByWeapon : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$DamageToDo : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$DestroyShelter : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$FiberLost : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$FireUnavailableTomorrow : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$ForageCardLost : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$SelectTargetOnlyUnsheltered : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$SelectTargetQuantity : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$SelectTargetQuantityAll : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:NightChangeStatement.kt$Survived : NightChangeStatement</ID>
    <ID>UndocumentedPublicClass:StrandedGameState.kt$StrandedGameState : GameState</ID>
    <ID>UndocumentedPublicClass:StrandedPlayerIntent.kt$SelectCard : StrandedPlayerIntent</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$CraftCard : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$DestroyShelter : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$DrawBelongingCard : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$DrawNightCard : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$DrawScavengeCard : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$ExtinguishFire : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$IncrementNight : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$LoseCard : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$SetFireBlockStatus : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$SetPhase : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$SingleHealthChange : StrandedStateChange</ID>
    <ID>UndocumentedPublicClass:StrandedStateChange.kt$UserCard : StrandedStateChange</ID>
    <ID>UndocumentedPublicFunction:CardRepository.kt$CardRepository$fun readBelongingCards(): List&lt;CardHolder&lt;Belongings>></ID>
    <ID>UndocumentedPublicFunction:CardRepository.kt$CardRepository$fun readForageCards(): List&lt;CardHolder&lt;ScavengeResult>></ID>
    <ID>UndocumentedPublicFunction:CardRepository.kt$CardRepository$fun readNightCards(): List&lt;CardHolder&lt;NightEvent>></ID>
    <ID>UndocumentedPublicFunction:CardRepository.kt$CardRepository$fun saveBelongingCards(list: List&lt;CardHolder&lt;Belongings>>)</ID>
    <ID>UndocumentedPublicFunction:CardRepository.kt$CardRepository$fun saveForageCards(list: List&lt;CardHolder&lt;ScavengeResult>>)</ID>
    <ID>UndocumentedPublicFunction:CardRepository.kt$CardRepository$fun saveNightCards(list: List&lt;CardHolder&lt;NightEvent>>)</ID>
    <ID>UndocumentedPublicFunction:Game.kt$Game$fun processEvent(change: StrandedStateChange)</ID>
    <ID>UndocumentedPublicFunction:Game.kt$Game$fun setGameState(newGameState: StrandedGameState)</ID>
    <ID>UndocumentedPublicFunction:GameEventHandler.kt$GameEventHandler$fun onCardReceived(playerId: String, card: Card)</ID>
    <ID>UndocumentedPublicFunction:GameEventHandler.kt$GameEventHandler$fun onCardRemoved(playerId: String, card: Card)</ID>
    <ID>UndocumentedPublicFunction:GameEventHandler.kt$GameEventHandler$fun onPlayerHealthChange(playerId: String, health: Int)</ID>
    <ID>UndocumentedPublicFunction:GameScope.kt$GameScope$fun endScope()</ID>
    <ID>UndocumentedPublicFunction:GameStateExtensions.kt$fun GamePlayer.getFood(): List&lt;Food></ID>
    <ID>UndocumentedPublicFunction:GameStateExtensions.kt$fun List&lt;ScavengeResult>.getResourceCard(resourceType: ResourceType): Resource?</ID>
    <ID>UndocumentedPublicFunction:GameStateExtensions.kt$fun List&lt;ScavengeResult>.getResources(): List&lt;Resource></ID>
    <ID>UndocumentedPublicFunction:GameStateExtensions.kt$fun getCard(player: GamePlayer, cardId: String): Card?</ID>
    <ID>UndocumentedPublicFunction:GameStateExtensions.kt$fun getScavengeResultCard(player: GamePlayer, cardId: String): Card?</ID>
    <ID>UndocumentedPublicFunction:MutableStrandedGameState.kt$MutableStrandedGameState.Companion$fun toSnapshot(state: MutableStrandedGameState): StrandedGameState</ID>
  </CurrentIssues>
</SmellBaseline>
