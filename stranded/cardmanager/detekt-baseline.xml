<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:NightCardManagerViewModel.kt$NightCardManagerViewModel$private fun instantiateStatementList(): List&lt;NightChangeStatement></ID>
    <ID>FunctionNaming:BelongingsCardsTab.kt$ @Composable fun BelongingsCardsTab( viewModel: BelongingCardManagerViewModel )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun &lt;T : Card> CardHolderItem( cardHolder: CardHolder&lt;T>, cardIndex: Int, selected: Boolean, onCardSelected: (index: Int) -> Unit, )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun &lt;T : Card> CardList( selectedIndex: Int, cardDeck: List&lt;CardHolder&lt;T>>, modifier: Modifier = Modifier, onCardSelected: (index: Int) -> Unit, )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun &lt;T : Card> TabFrame( selectedIndex: Int, cardDeck: List&lt;CardHolder&lt;T>>, handler: CardEventHandler, content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun &lt;T : NightChangeStatement> ChangeItem( change: T, cardIndex: Int, selected: Boolean, onItemSelected: (index: Int) -> Unit, )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun &lt;T : NightChangeStatement> StatementList( selectedIndex: Int, changeList: List&lt;T>, modifier: Modifier = Modifier, onChangeSelected: (index: Int) -> Unit, )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun BottomBar( modifier: Modifier = Modifier, onSave: () -> Unit, onNew: () -> Unit, onRemove: () -> Unit, )</ID>
    <ID>FunctionNaming:Composables.kt$ @Composable fun CardManager( tabTitles: List&lt;String>, tabContent: @Composable (Int) -> Unit, )</ID>
    <ID>FunctionNaming:ForageCardsTab.kt$ @Composable fun ForageCardsTab( viewModel: ForageCardManagerViewModel, )</ID>
    <ID>FunctionNaming:NightCardsTab.kt$ @Composable fun NightCardsTab( viewModel: NightCardManagerViewModel )</ID>
    <ID>LongMethod:BelongingsCardsTab.kt$ @Composable fun BelongingsCardsTab( viewModel: BelongingCardManagerViewModel )</ID>
    <ID>LongMethod:ForageCardsTab.kt$ @Composable fun ForageCardsTab( viewModel: ForageCardManagerViewModel, )</ID>
    <ID>LongMethod:NightCardsTab.kt$ @Composable fun NightCardsTab( viewModel: NightCardManagerViewModel )</ID>
    <ID>SwallowedException:BaseCardManagerViewModel.kt$BaseCardManagerViewModel$throwable: Throwable</ID>
    <ID>SwallowedException:BelongingCardManagerViewModel.kt$BelongingCardManagerViewModel$throwable: Throwable</ID>
    <ID>SwallowedException:ForageCardManagerViewModel.kt$ForageCardManagerViewModel$throwable: Throwable</ID>
    <ID>UndocumentedPublicClass:BaseCardManagerViewModel.kt$BaseCardManagerViewModel&lt;T : Card> : CardEventHandler</ID>
    <ID>UndocumentedPublicClass:BelongingCardManagerViewModel.kt$BelongingCardManagerViewModel : BaseCardManagerViewModel</ID>
    <ID>UndocumentedPublicClass:ForageCardManagerViewModel.kt$ForageCardManagerViewModel : BaseCardManagerViewModel</ID>
    <ID>UndocumentedPublicClass:NightCardManagerViewModel.kt$NightCardManagerViewModel : BaseCardManagerViewModel</ID>
    <ID>UndocumentedPublicFunction:BaseCardManagerViewModel.kt$BaseCardManagerViewModel$abstract fun readDeckFromRepository(): List&lt;CardHolder&lt;T>></ID>
    <ID>UndocumentedPublicFunction:BaseCardManagerViewModel.kt$BaseCardManagerViewModel$abstract fun writeDeckToRepository(deck: List&lt;CardHolder&lt;T>>)</ID>
    <ID>UndocumentedPublicFunction:BaseCardManagerViewModel.kt$BaseCardManagerViewModel$open fun onShow()</ID>
    <ID>UndocumentedPublicFunction:BelongingCardManagerViewModel.kt$BelongingCardManagerViewModel$fun onHealthModifierUpdated(quantity: String)</ID>
    <ID>UndocumentedPublicFunction:BelongingCardManagerViewModel.kt$BelongingCardManagerViewModel$fun onRemainingDaysUpdated(quantity: String)</ID>
    <ID>UndocumentedPublicFunction:BelongingCardManagerViewModel.kt$BelongingCardManagerViewModel$fun onRemainingUsesUpdated(quantity: String)</ID>
    <ID>UndocumentedPublicFunction:BelongingCardManagerViewModel.kt$BelongingCardManagerViewModel$fun setCardType(cardType: String)</ID>
    <ID>UndocumentedPublicFunction:ForageCardManagerViewModel.kt$ForageCardManagerViewModel$fun onHealthModifierUpdated(quantity: String)</ID>
    <ID>UndocumentedPublicFunction:ForageCardManagerViewModel.kt$ForageCardManagerViewModel$fun onRemainingDaysUpdated(quantity: String)</ID>
    <ID>UndocumentedPublicFunction:ForageCardManagerViewModel.kt$ForageCardManagerViewModel$fun onRemainingUsesUpdated(quantity: String)</ID>
    <ID>UndocumentedPublicFunction:ForageCardManagerViewModel.kt$ForageCardManagerViewModel$fun setCardType(cardType: String)</ID>
    <ID>UndocumentedPublicFunction:ForageCardManagerViewModel.kt$ForageCardManagerViewModel$fun setResourceType(resourceType: ResourceType)</ID>
    <ID>UndocumentedPublicFunction:Main.kt$fun main()</ID>
    <ID>UndocumentedPublicFunction:NightCardManagerViewModel.kt$NightCardManagerViewModel$fun onAddStatementSelected()</ID>
    <ID>UndocumentedPublicFunction:NightCardManagerViewModel.kt$NightCardManagerViewModel$fun onArgument1FieldUpdated(argument: String)</ID>
    <ID>UndocumentedPublicFunction:NightCardManagerViewModel.kt$NightCardManagerViewModel$fun onArgument2FieldUpdated(argument: String)</ID>
    <ID>UndocumentedPublicFunction:NightCardManagerViewModel.kt$NightCardManagerViewModel$fun onRemoveStatementSelected()</ID>
    <ID>UndocumentedPublicFunction:NightCardManagerViewModel.kt$NightCardManagerViewModel$fun onStatementAtIndexSelected(index: Int)</ID>
    <ID>UndocumentedPublicFunction:NightCardManagerViewModel.kt$NightCardManagerViewModel$fun onStatementTypeIndexSelected(index: Int)</ID>
  </CurrentIssues>
</SmellBaseline>
