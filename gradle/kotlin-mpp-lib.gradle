/**
 * Plugin to create a kotlin MPP with safe defaults.
 */
apply plugin: "org.jetbrains.kotlin.multiplatform"

    apply plugin: "com.android.library"
    apply plugin: "kotlin-kapt"
apply from: "$rootDir/gradle/detekt.gradle"

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packaging {
        resources {
            excludes += "/META-INF/**"
        }
    }

    kotlin {
        jvmToolchain(17)
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                testLogging {
                    events "passed", "skipped", "failed"
                }
            }
        }
    }
}

dependencies {
    implementation Kotlin.stdlib.jdk8
    implementation KotlinX.coroutines.core
    implementation KotlinX.coroutines.android

    testImplementation AndroidX.test.core
    testImplementation AndroidX.test.ext.junit
    testImplementation AndroidX.test.ext.junit.ktx
    testImplementation AndroidX.archCore.common
    testImplementation AndroidX.archCore.runtime
    testImplementation AndroidX.archCore.testing
    testImplementation KotlinX.coroutines.test
    testImplementation Testing.junit4
    testImplementation Kotlin.test
    testImplementation Kotlin.test.junit
    testImplementation Testing.mockK
    testImplementation Testing.mockK.android

    androidTestImplementation AndroidX.test.ext.junit
    androidTestImplementation AndroidX.test.ext.junit.ktx
    androidTestImplementation AndroidX.test.core
    androidTestImplementation AndroidX.test.rules
    androidTestImplementation KotlinX.coroutines.test
    androidTestImplementation Testing.junit4
    androidTestImplementation Kotlin.test
    androidTestImplementation Kotlin.test.junit
    androidTestImplementation Testing.mockK.android
    androidTestImplementation Testing.robolectric
}

kotlin {
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
                freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            }
        }
    }

    android() {
        compilations.all {
            kotlinOptions {

            }
        }
    }

    jvm() {
        compilations.all {
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_17
            }
        }
    }

    // TODO: This target should be determined at configuration time since it depends on the
    // architecture of the host.
    iosSimulatorArm64("ios") {

    }

    js {
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation Kotlin.stdlib.common
                implementation KotlinX.coroutines.core
            }
        }
        commonTest {
            dependencies {
                implementation KotlinX.coroutines.test
                implementation Kotlin.test.common
                implementation Kotlin.test.annotationsCommon
            }
        }
        androidMain {
            dependsOn(commonMain)
        }
        androidUnitTest {
            dependsOn(commonTest)
        }
        jvmMain {
            dependsOn(commonMain)
            dependencies {
                implementation Kotlin.stdlib.jdk8
                implementation KotlinX.coroutines.core
            }
        }
        jvmTest {
            dependsOn(commonTest)
            dependencies {
                implementation KotlinX.coroutines.test
                implementation Testing.junit.jupiter.api
                implementation Kotlin.test.junit5
                implementation Testing.mockK

                runtimeOnly Testing.junit.jupiter.engine
            }
        }
        jsMain {
            dependsOn(commonMain)
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:_"
            }
        }
        jsTest {
            dependsOn(commonTest)
            dependencies {
                implementation Kotlin.test.js
                implementation KotlinX.coroutines.test
            }
        }
        iosMain {
            dependsOn(commonMain)
        }
        iosTest {
            dependsOn(commonTest)
        }
    }
}

tasks {
    jvmTest {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

tasks.register("releaseJs") {
    group = 'build'
    description = 'Run all the steps to build a Js artifact'
    dependsOn 'compileKotlinJs'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektJsMain' // Run the code analyzer
    dependsOn 'jsTest'
}

tasks.register("releaseJvm") {
    group = 'build'
    description = 'Run all the steps to build a releaseJvm artifact'
    dependsOn 'compileKotlinJvm'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektJvmMain' // Run the code analyzer
    dependsOn 'jvmTest'
}

tasks.register("releaseAndroid") {
    group = 'build'
    description = 'Run all the steps to build a releaseAndroid artifact'
    dependsOn 'assembleDebug'
    dependsOn 'assembleRelease'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektAndroidDebug' // Run the code analyzer
    dependsOn 'detektAndroidRelease' // Run the code analyzer
    dependsOn 'testDebugUnitTest'
    dependsOn 'testReleaseUnitTest'
}

tasks.register("releaseIos") {
    group = 'build'
    description = 'Run all the steps to build a releaseIos artifact'
    dependsOn 'compileKotlinIos'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektIosMain' // Run the code analyzer
    dependsOn 'iosTest'
}

tasks.register("release") {
    group = 'build'
    description = 'Run all the steps to build a release artifact for all enabled targets'

    dependsOn 'releaseJvm'
    dependsOn 'releaseAndroid'
    dependsOn 'releaseJs'
    dependsOn 'releaseIos'
}