apply plugin: 'jacoco'

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = project.android.buildTypes.collect { type -> type.name }
    def productFlavors = project.android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "jacoco${testTaskName.capitalize()}Report" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = 'verification'
                description = "Generate Jacoco Android coverage reports on the ${sourceName.capitalize()} build."

                def excludes = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/Manifest*.*',
                        'android/**/*.*',
                        '**/BuildConfig.*',
                        '**/*$ViewBinder*.*',
                        '**/*$ViewInjector*.*',
                        '**/Lambda$*.class',
                        '**/Lambda.class',
                        '**/*Lambda.class',
                        '**/*Lambda*.class'
                ]

                classDirectories.setFrom(files([
                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}", excludes: excludes),
                        fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}", excludes: excludes)
                ]))

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/main/kotlin",
                        "src/$productFlavorName/java",
                        "src/$productFlavorName/kotlin",
                        "src/$buildTypeName/java",
                        "src/$buildTypeName/kotlin"
                ]
                additionalSourceDirs.setFrom(files(coverageSourceDirs))
                sourceDirectories.setFrom(files(coverageSourceDirs))
                executionData(files("${project.buildDir}/jacoco/${testTaskName}.exec"))

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }

    task "jacocoAndroidTestReport" (type:JacocoReport) {
        group = 'verification'
        description = "Generate Jacoco Android coverage reports for all build flavours."
    }
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            tasks.jacocoAndroidTestReport {
                def sourceName, sourcePath
                if (!productFlavorName) {
                    sourceName = sourcePath = "${buildTypeName}"
                } else {
                    sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                    sourcePath = "${productFlavorName}/${buildTypeName}"
                }
                def testTaskName = "test${sourceName.capitalize()}UnitTest"

                // Make the androidTestCoverage depend on all other Android coverage tasks
                dependsOn "jacoco${testTaskName.capitalize()}Report"
            }
        }
    }
}