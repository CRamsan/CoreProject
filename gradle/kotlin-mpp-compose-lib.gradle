/**
 * Plugin to create a kotlin MPP with safe defaults.
 */

apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "com.android.library"
apply plugin: "org.jetbrains.compose"
apply from: "$rootDir/gradle/detekt.gradle"

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packaging {
        resources {
            excludes += "/META-INF/**"
        }
    }

    kotlin {
        jvmToolchain(17)
    }

    sourceSets["main"].resources.srcDirs("src/commonMain/resources")

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                testLogging {
                    events "passed", "skipped", "failed"
                }
            }
        }
    }
}

dependencies {
    implementation(AndroidX.activity.compose)
    implementation(AndroidX.appCompat)
    implementation(AndroidX.core.ktx)
    implementation(compose.desktop.common)
}

kotlin {
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
                freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            }
        }
    }

    android() {
        compilations.all {
            kotlinOptions {

            }
        }
    }

    jvm() {
        compilations.all {
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_17
            }
        }
    }

    // TODO: This target should be determined at configuration time since it depends on the
    // architecture of the host.
    iosSimulatorArm64("ios") {

    }

    sourceSets {
        commonMain {
            dependencies {
                implementation(project(":framework:interfacelib"))
                implementation(project(":framework:logging"))

                implementation(compose.runtime)
                implementation(compose.foundation)
                implementation(compose.material)
                implementation(compose.components.resources)
            }
        }
        commonTest {
            dependencies {
            }
        }
        androidMain {
            dependsOn(commonMain)
        }
        androidUnitTest {
            dependsOn(commonTest)
        }
        jvmMain {
            dependsOn(commonMain)
            dependencies {
                implementation(compose.desktop.common)
            }
        }
        jvmTest {
            dependsOn(commonTest)
            dependencies {
            }
        }
        iosMain {
            dependsOn(commonMain)
        }
        iosTest {
            dependsOn(commonTest)
        }
    }
}

tasks {
    jvmTest {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

tasks.register("releaseJvm") {
    group = 'build'
    description = 'Run all the steps to build a releaseJvm artifact'
    dependsOn 'compileKotlinJvm'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektJvmMain' // Run the code analyzer
    dependsOn 'jvmTest'
}

tasks.register("releaseAndroid") {
    group = 'build'
    description = 'Run all the steps to build a releaseAndroid artifact'
    dependsOn 'assembleDebug'
    dependsOn 'assembleRelease'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektAndroidDebug' // Run the code analyzer
    dependsOn 'detektAndroidRelease' // Run the code analyzer
    dependsOn 'testDebugUnitTest'
    dependsOn 'testReleaseUnitTest'
}

tasks.register("releaseIos") {
    group = 'build'
    description = 'Run all the steps to build a releaseIos artifact'
    dependsOn 'compileKotlinIos'
    dependsOn 'detektMetadataMain' // Run the code analyzer on the common-code source set
    dependsOn 'detektIosMain' // Run the code analyzer
    dependsOn 'iosTest'
}

tasks.register("release") {
    group = 'build'
    description = 'Run all the steps to build a release artifact for all enabled targets'

    dependsOn 'releaseJvm'
    dependsOn 'releaseAndroid'
    dependsOn 'releaseIos'
}