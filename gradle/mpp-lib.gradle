/**
 * Plugin to create a kotlin MPP with safe defaults.
 * This plugin requires that the project set the values for:
 * - libraryVersionCode
 * - libraryVersionName
 * - disableJs
 */
apply plugin: "com.android.library"
apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "kotlin-kapt"
apply from: "$rootDir/gradle/jacoco-android.gradle"
apply from: "$rootDir/gradle/ktlint.gradle"

// Set the task name for the jacoco-mpp-jvm plugin
ext {
    jvmTestTaskName = "jvmTest"
}
apply from: "$rootDir/gradle/jacoco-mpp-jvm.gradle"

android {
    buildToolsVersion versions_tools.AndroidBuildToolsVersion
    compileSdkVersion versions_tools.CompileSdkVersion
    defaultConfig {
        versionCode libraryVersionCode
        versionName libraryVersionName
        minSdkVersion versions_tools.MinSdkVersion
        targetSdkVersion versions_tools.TargetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility versions_tools.JavaCompatibility
        targetCompatibility versions_tools.JavaCompatibility
    }

    sourceSets {
        main {
            // Changes the directory for Java sources. The default directory is
            // 'src/main/java'.
            java.srcDirs += ['src/main/kotlin']
        }
        test {
            java.srcDirs += ['src/test/kotlin']
        }
        androidTest {
            java.srcDirs += ['src/androidTest/kotlin']
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                testLogging {
                    events "passed", "skipped", "failed"
                }
            }
        }
    }
}

dependencies {
    implementation meta_packages.CoreAndroid

    testImplementation meta_packages.CoreTestAndroid

    androidTestImplementation meta_packages.CoreAndrodTestAndroid
}

kotlin {
    android("android") {
        compilations.all {
            kotlinOptions {
                jvmTarget = versions_tools.JavaCompatibility
            }
        }
    }
    jvm("jvm") {
        compilations.all {
            kotlinOptions {
                jvmTarget = versions_tools.JavaCompatibility
            }
        }
    }
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    if (!project.ext.has("disableJs") || project.ext.disableJs != true) {
        js(IR) {
            nodejs()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                meta_packages.CoreCommon.each { implementation it }
            }
        }
        commonTest {
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                // implementation packages.KotlinTestCommon
                meta_packages.CoreTestCommon.each { implementation it }
            }
        }
        androidMain {
            dependsOn(commonMain)
        }
        androidTest {
            dependsOn(commonTest)
        }
        jvmMain {
            dependsOn(commonMain)
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                meta_packages.CoreJVM.each { implementation it }
            }
        }
        jvmTest {
            dependsOn(commonTest)
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                meta_packages.CoreTestJVM.each { implementation it }
            }
        }
        jsMain {
            dependsOn(commonMain)
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                meta_packages.CoreJS.each { implementation it }
            }
        }
        jsTest {
            dependsOn(commonTest)
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                meta_packages.CoreTestJS.each { implementation it }
            }
        }
        iosMain {
            dependsOn(commonMain)
        }
        iosTest {
            dependsOn(commonTest)
        }
    }
}

tasks {
    jvmTest {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

// TODO: Verify if this can be removed
// https://youtrack.jetbrains.com/issue/KT-46165
// https://youtrack.jetbrains.com/issue/KT-46978
tasks.withType(org.gradle.jvm.tasks.Jar) { duplicatesStrategy = DuplicatesStrategy.WARN }

ext.registerDependency = { project ->
    release.configure { dependsOn("${project}:releaseJs") }
    release.configure { dependsOn("${project}:releaseJvm") }
    release.configure { dependsOn("${project}:releaseAndroid") }
}

tasks.register("releaseJs") {
    group = 'build'
    description = 'Run all the steps to build a Js artifact'

    dependsOn 'ktlint'
    dependsOn 'compileKotlinJs'
    dependsOn 'jsTest'
}

tasks.register("releaseJvm") {
    group = 'build'
    description = 'Run all the steps to build a releaseJvm artifact'

    dependsOn 'ktlint'
    dependsOn 'compileKotlinJvm'
    dependsOn 'jvmTest'
    dependsOn 'jacocoTestReport'
}

tasks.register("releaseAndroid") {
    group = 'build'
    description = 'Run all the steps to build a releaseAndroid artifact'

    dependsOn 'ktlint' // Verifies the format
    dependsOn 'build' // Assembles and test this project
    dependsOn 'jacocoAndroidTestReport' // Generate a jacoco report from the unit-test results
}

tasks.register("release") {
    group = 'build'
    description = 'Run all the steps to build a release artifact for Android and JVM targets'

    dependsOn 'releaseJvm'
    dependsOn 'releaseAndroid'
    if (!project.ext.has("disableJs") || project.ext.disableJs != true) {
        dependsOn 'releaseJs'
    }
}