/**
 * Plugin to create a kotlin MPP with safe defaults.
 * This plugin requires that the project set the values for:
 * - libraryVersionCode
 * - libraryVersionName
 *
 * By default, the JVM, JS and IOS targets are created. You can
 * call the following functions to disable some of them:
 * disableJvmTarget()
 * disableIosTarget()
 * disableJsTarget()
 *
 */
apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "org.jetbrains.dokka"

apply from: "$rootDir/gradle/helper-functions.gradle"
apply from: "$rootDir/gradle/ktlint.gradle"

if (isJvmTargetEnabled()) {
// Set the task name for the jacoco-mpp-jvm plugin
    ext {
        jvmTestTaskName = "jvmTest"
    }
    apply from: "$rootDir/gradle/jacoco-mpp-jvm.gradle"
}

if (isAndroidTargetEnabled()) {
    apply plugin: "com.android.library"
    apply plugin: "kotlin-kapt"

    apply from: "$rootDir/gradle/jacoco-android.gradle"


    android {
        buildToolsVersion versions_tools.AndroidBuildToolsVersion
        compileSdkVersion versions_tools.CompileSdkVersion
        defaultConfig {
            versionCode libraryVersionCode
            versionName libraryVersionName
            minSdkVersion versions_tools.MinSdkVersion
            targetSdkVersion versions_tools.TargetSdkVersion
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
        compileOptions {
            sourceCompatibility versions_tools.JavaCompatibility
            targetCompatibility versions_tools.JavaCompatibility
        }

        sourceSets {
            main {
                // Changes the directory for Java sources. The default directory is
                // 'src/main/java'.
                java.srcDirs += ['src/main/kotlin']
            }
            test {
                java.srcDirs += ['src/test/kotlin']
            }
            androidTest {
                java.srcDirs += ['src/androidTest/kotlin']
            }
        }
        testOptions {
            unitTests {
                includeAndroidResources = true
                all {
                    testLogging {
                        events "passed", "skipped", "failed"
                    }
                }
            }
        }
    }

    dependencies {
        implementation meta_packages.CoreAndroid

        testImplementation meta_packages.CoreTestAndroid

        androidTestImplementation meta_packages.CoreAndrodTestAndroid
    }
}

kotlin {
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
                freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            }
        }
    }

    if (isAndroidTargetEnabled()) {
        android("android") {
            compilations.all {
                kotlinOptions {
                    jvmTarget = versions_tools.JavaCompatibility
                }
            }
        }
    }

    if (isJvmTargetEnabled()) {
        jvm("jvm") {
            compilations.all {
                kotlinOptions {
                    jvmTarget = versions_tools.JavaCompatibility
                }
            }
        }
    }
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    if (isIosTargetEnabled()) {
        iosX64("ios") {
            binaries {
                framework()
            }
        }
    }
    if (isJsTargetEnabled()) {
        js {
            nodejs()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                meta_packages.CoreCommon.each { implementation it }
            }
        }
        commonTest {
            dependencies {
                // This syntax is used as the kotlin-mpp plugin does not support
                // arrays as arguments.
                // implementation packages.KotlinTestCommon
                meta_packages.CoreTestCommon.each { implementation it }
            }
        }
        if (isAndroidTargetEnabled()) {
            androidMain {
                dependsOn(commonMain)
            }
            androidTest {
                dependsOn(commonTest)
            }
        }
        if (isJvmTargetEnabled()) {
            jvmMain {
                dependsOn(commonMain)
                dependencies {
                    // This syntax is used as the kotlin-mpp plugin does not support
                    // arrays as arguments.
                    meta_packages.CoreJVM.each { implementation it }
                }
            }
            jvmTest {
                dependsOn(commonTest)
                dependencies {
                    // This syntax is used as the kotlin-mpp plugin does not support
                    // arrays as arguments.
                    meta_packages.CoreTestJVM.each { implementation it }
                }
            }
        }
        if (isJsTargetEnabled()) {
            jsMain {
                dependsOn(commonMain)
                dependencies {
                    // This syntax is used as the kotlin-mpp plugin does not support
                    // arrays as arguments.
                    meta_packages.CoreJS.each { implementation it }
                }
            }
            jsTest {
                dependsOn(commonTest)
                dependencies {
                    // This syntax is used as the kotlin-mpp plugin does not support
                    // arrays as arguments.
                    meta_packages.CoreTestJS.each { implementation it }
                }
            }
        }
        if (isIosTargetEnabled()) {
            iosMain {
                dependsOn(commonMain)
            }
            iosTest {
                dependsOn(commonTest)
            }
        }
    }
}

tasks {
    if (isJvmTargetEnabled()) {
        jvmTest {
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }
}

// TODO: Verify if this can be removed
// https://youtrack.jetbrains.com/issue/KT-46165
// https://youtrack.jetbrains.com/issue/KT-46978
tasks.withType(org.gradle.jvm.tasks.Jar) { duplicatesStrategy = DuplicatesStrategy.WARN }

def releaseJs = tasks.register("releaseJs") {
    group = 'build'
    description = 'Run all the steps to build a Js artifact'
    if (isJsTargetEnabled()) {
        dependsOn 'ktlint'
        dependsOn 'compileKotlinJs'
        dependsOn 'jsTest'
    }
}

def releaseJvm = tasks.register("releaseJvm") {
    group = 'build'
    description = 'Run all the steps to build a releaseJvm artifact'
    if (isJvmTargetEnabled()) {
        dependsOn 'ktlint'
        dependsOn 'compileKotlinJvm'
        dependsOn 'jvmTest'
        dependsOn 'jacocoTestReport'
    }
}

def releaseAndroid = tasks.register("releaseAndroid") {
    group = 'build'
    description = 'Run all the steps to build a releaseAndroid artifact'
    if (isAndroidTargetEnabled()) {
        dependsOn 'ktlint' // Verifies the format
        dependsOn 'assembleDebug'
        dependsOn 'assembleRelease'
        dependsOn 'testDebugUnitTest'
        dependsOn 'testReleaseUnitTest'
        dependsOn 'jacocoAndroidTestReport' // Generate a jacoco report from the unit-test results
    }
}

def release = tasks.register("release") {
    group = 'build'
    description = 'Run all the steps to build a release artifact for all enabled targets'

    if (isJvmTargetEnabled()) {
        dependsOn 'releaseJvm'
    }
    if (isAndroidTargetEnabled()) {
        dependsOn 'releaseAndroid'
    }
    if (isJsTargetEnabled()) {
        dependsOn 'releaseJs'
    }
}

ext.registerDependency = { project ->
    if (isJvmTargetEnabled()) {
        def dependency = "${project}:releaseJvm"
        println("Adding dependency to $dependency")
        releaseJvm.configure { dependsOn(dependency) }
    }
    if (isAndroidTargetEnabled()) {
        def dependency = "${project}:releaseAndroid"
        println("Adding dependency to $dependency")
        releaseAndroid.configure { dependsOn(dependency) }
    }
    if (isJsTargetEnabled()) {
        def dependency = "${project}:releaseJs"
        println("Adding dependency to $dependency")
        releaseJs.configure { dependsOn(dependency) }
    }
}

// Register a dependency to a JVM library with the `releaseJVM` task
ext.registerJvmDependency = { project ->
    if (isJvmTargetEnabled()) {
        def dependency = "${project}:releaseJvm"
        println("Adding dependency to $dependency")
        releaseJvm.configure { dependsOn(dependency) }
    }
}
