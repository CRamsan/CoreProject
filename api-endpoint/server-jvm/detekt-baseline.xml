<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>MemberNameEqualsClassName:Server.kt$Server$private val server = embeddedServer(Netty, port = Constants.PORT, host = Constants.HOST) { routing { /** * Needed for loading the js library */ static("/static") { resources() } /** * Load the HTML site */ get("/") { call.respondHtml(HttpStatusCode.OK, HTML::index) } /** * REST API endpoint */ route(Constants.API_PATH) { post(Constants.API_ENCODE) { val cipher = call.request.queryParameters["cipher"] val seed = call.request.queryParameters["seed"]?.toInt() val content = call.receiveText() val channel = call.receiveChannel() var byteArray = byteArrayOf() while (!channel.isClosedForRead) { byteArray += channel.readByte() } val file = File("Test") file.writeBytes(byteArray) println("Received request with content: $content") val encodedContent = encoder.encode(content, cipher, seed) println("Sending response with encoded content: $encodedContent") call.respondText(encodedContent) } post(Constants.API_DECODE) { val cipher = call.request.queryParameters["cipher"] val seed = call.request.queryParameters["seed"]?.toInt() val content = call.receiveText() println("Received request with content: $content") val encodedContent = encoder.decode(content, cipher, seed) println("Sending response with decoded content: $encodedContent") call.respondText(encodedContent) } } } }</ID>
    <ID>UndocumentedPublicFunction:Index.kt$fun HTML.index()</ID>
    <ID>UndocumentedPublicFunction:Server.kt$Server$fun start()</ID>
  </CurrentIssues>
</SmellBaseline>
