<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>UndocumentedPublicClass:KotlinPriorityQueue.kt$KotlinPriorityQueue&lt;T></ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun add(e: T)</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun element(): T</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun offer(e: T)</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun peek(): T?</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun poll(): T?</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun remove(): T</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun remove(e: T)</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual fun size()</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$actual operator fun contains(e: T)</ID>
    <ID>ComplexCondition:EntityManager.kt$EntityManager$posX &lt; 0 || posX > entityMap.lastIndex || posY &lt; 0 || posY > entityMap.first().lastIndex</ID>
    <ID>ComplexCondition:GameMap.kt$GameMap$posX >= map.size || posY >= map.first().size || posX &lt; 0 || posY &lt; 0</ID>
    <ID>ComplexMethod:EntityManager.kt$EntityManager$override fun executeTransition(transition: Transition)</ID>
    <ID>TooGenericExceptionThrown:EntityDSL.kt$EntityInstanceBuilder$throw RuntimeException("Could not find template for $template")</ID>
    <ID>TooGenericExceptionThrown:EntityDSL.kt$EntityInstanceBuilder$throw RuntimeException("Template for entity with ID $id is not defined")</ID>
    <ID>TooGenericExceptionThrown:EntityManager.kt$EntityManager$throw RuntimeException("Cell door already closed")</ID>
    <ID>TooGenericExceptionThrown:EntityManager.kt$EntityManager$throw RuntimeException("Cell door already open")</ID>
    <ID>TooGenericExceptionThrown:EntityManager.kt$EntityManager$throw RuntimeException("Entity already registered at location: $item")</ID>
    <ID>TooGenericExceptionThrown:EntityManager.kt$EntityManager$throw RuntimeException("Unexpected cell type: $cell")</ID>
    <ID>TooGenericExceptionThrown:ItemDSL.kt$ItemInstanceBuilder$throw RuntimeException("Could not find template for $template")</ID>
    <ID>TooGenericExceptionThrown:ItemDSL.kt$ItemInstanceBuilder$throw RuntimeException("Template for entity with ID $id is not defined")</ID>
    <ID>TooGenericExceptionThrown:Scene.kt$Scene$throw RuntimeException("Trying to play game but scene is not loaded")</ID>
    <ID>TooManyFunctions:EntityManager.kt$EntityManager : EntityManagerInterfaceEntityManagerInteractionReceiverTransitionHandler</ID>
    <ID>UndocumentedPublicClass:AStarAlgorithm.kt$AStarAlgorithm</ID>
    <ID>UndocumentedPublicClass:AStarFunctionProvider.kt$AStarFunctionProvider</ID>
    <ID>UndocumentedPublicClass:Cell.kt$Cell : NodeGridPositionableInterface</ID>
    <ID>UndocumentedPublicClass:Cell.kt$DoorCell : Cell</ID>
    <ID>UndocumentedPublicClass:Cell.kt$EndCell : Cell</ID>
    <ID>UndocumentedPublicClass:Cell.kt$OpenCell : Cell</ID>
    <ID>UndocumentedPublicClass:Cell.kt$WallCell : Cell</ID>
    <ID>UndocumentedPublicClass:CellFactory.kt$CellFactory</ID>
    <ID>UndocumentedPublicClass:CharacterInterface.kt$CharacterInterface : GameEntityInterface</ID>
    <ID>UndocumentedPublicClass:EntityDSL.kt$AllyBuilderBuilder</ID>
    <ID>UndocumentedPublicClass:EntityDSL.kt$EnemyBuilderBuilder</ID>
    <ID>UndocumentedPublicClass:EntityDSL.kt$EntityBuildersBuilder</ID>
    <ID>UndocumentedPublicClass:EntityDSL.kt$EntityInstanceBuilder</ID>
    <ID>UndocumentedPublicClass:EntityDSL.kt$EntityListBuilder</ID>
    <ID>UndocumentedPublicClass:EntityDSL.kt$PlaceableBuilderBuilder</ID>
    <ID>UndocumentedPublicClass:EntityManager.kt$EntityManager : EntityManagerInterfaceEntityManagerInteractionReceiverTransitionHandler</ID>
    <ID>UndocumentedPublicClass:EntityManagerEventListener.kt$EntityManagerEventListener</ID>
    <ID>UndocumentedPublicClass:EventDSL.kt$ChangeTriggerEventBuilder</ID>
    <ID>UndocumentedPublicClass:EventDSL.kt$EventListBuilder</ID>
    <ID>UndocumentedPublicClass:EventDSL.kt$InteractiveEventBuilder</ID>
    <ID>UndocumentedPublicClass:EventDSL.kt$InteractiveEventOptionBuilder</ID>
    <ID>UndocumentedPublicClass:EventDSL.kt$SwapCharacterInteractiveEventBuilder</ID>
    <ID>UndocumentedPublicClass:GameMap.kt$GameMap</ID>
    <ID>UndocumentedPublicClass:GameMapAStarFunctionProvider.kt$GameMapAStarFunctionProvider : AStarFunctionProvider</ID>
    <ID>UndocumentedPublicClass:InitialValues.kt$InitialValues</ID>
    <ID>UndocumentedPublicClass:InteractiveEvent.kt$InteractiveEvent : BaseEvent</ID>
    <ID>UndocumentedPublicClass:InteractiveEventOption.kt$InteractiveEventOption</ID>
    <ID>UndocumentedPublicClass:ItemDSL.kt$ConsumableItemBuilderBuilder</ID>
    <ID>UndocumentedPublicClass:ItemDSL.kt$EquippableItemBuilderBuilder</ID>
    <ID>UndocumentedPublicClass:ItemDSL.kt$ItemBuildersBuilder</ID>
    <ID>UndocumentedPublicClass:ItemDSL.kt$ItemInstanceBuilder</ID>
    <ID>UndocumentedPublicClass:ItemDSL.kt$ItemListBuilder</ID>
    <ID>UndocumentedPublicClass:ItemDSL.kt$KeyItemBuilderBuilder</ID>
    <ID>UndocumentedPublicClass:MapLoader.kt$MapLoader</ID>
    <ID>UndocumentedPublicClass:Node.kt$Node</ID>
    <ID>UndocumentedPublicClass:NonInteractiveEvent.kt$NonInteractiveEvent : BaseEvent</ID>
    <ID>UndocumentedPublicClass:NoopEvent.kt$NoopEvent : BaseEvent</ID>
    <ID>UndocumentedPublicClass:Scene.kt$Scene</ID>
    <ID>UndocumentedPublicClass:SceneConfig.kt$SceneConfig</ID>
    <ID>UndocumentedPublicClass:SceneConfigDSL.kt$SceneConfigBuilder</ID>
    <ID>UndocumentedPublicClass:SceneEventsCallback.kt$SceneEventsCallback</ID>
    <ID>UndocumentedPublicClass:SwapCharacterEvent.kt$SwapCharacterEvent : NonInteractiveEvent</ID>
    <ID>UndocumentedPublicClass:TerrainIds.kt$TerrainIds</ID>
    <ID>UndocumentedPublicClass:Transition.kt$CloseDoor : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$ConsumeItem : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$DamageEntity : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$Disable : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$DisplayInteractiveEvent : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$DropItem : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$Enable : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$EndTurn : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$EquipItem : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$HideInteractiveEvent : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$Move : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$OpenDoor : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$PickUpItem : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$ReconstructItem : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$StartTurn : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$SwapCharacter : Transition</ID>
    <ID>UndocumentedPublicClass:Transition.kt$UnequiptItem : Transition</ID>
    <ID>UndocumentedPublicClass:TransitionStack.kt$TransitionStack</ID>
    <ID>UndocumentedPublicClass:TransitionStack.kt$TransitionStack$TransitionHandler</ID>
    <ID>UndocumentedPublicClass:TriggerDSL.kt$CellTriggerBuilder</ID>
    <ID>UndocumentedPublicClass:TriggerDSL.kt$CharacterTriggerBuilder</ID>
    <ID>UndocumentedPublicClass:TriggerDSL.kt$TriggerListBuilder</ID>
    <ID>UndocumentedPublicClass:TurnAction.kt$TurnAction : TurnActionInterface</ID>
    <ID>UndocumentedPublicClass:TurnActionInterface.kt$TurnActionInterface</ID>
    <ID>UndocumentedPublicFunction:AStarAlgorithm.kt$AStarAlgorithm.Companion$fun findPath(start: Node, goal: Node, maxCost: Int, functionProvider: AStarFunctionProvider): List&lt;Node></ID>
    <ID>UndocumentedPublicFunction:AStarFunctionProvider.kt$AStarFunctionProvider$fun distanceBetween(current: Node, neighbor: Node): Float</ID>
    <ID>UndocumentedPublicFunction:AStarFunctionProvider.kt$AStarFunctionProvider$fun heuristicCostEstimate(neighbor: Node, goal: Node): Float</ID>
    <ID>UndocumentedPublicFunction:AllyBuilder.kt$AllyBuilder$fun build( entityId: String, posX: Int, posY: Int, priority: Int?, enabled: Boolean?, ): Ally</ID>
    <ID>UndocumentedPublicFunction:Cell.kt$Cell$abstract fun blocksMovement(): Boolean</ID>
    <ID>UndocumentedPublicFunction:CellFactory.kt$CellFactory$fun createCell(terrainType: TerrainType): Cell</ID>
    <ID>UndocumentedPublicFunction:ConsumableItemBuilder.kt$ConsumableItemBuilder$fun build(entityId: String, posX: Int, posY: Int)</ID>
    <ID>UndocumentedPublicFunction:EnemyBuilder.kt$EnemyBuilder$fun build( entityId: String, posX: Int, posY: Int, priority: Int?, enabled: Boolean?, ): Enemy</ID>
    <ID>UndocumentedPublicFunction:EntityDSL.kt$EntityBuildersBuilder$fun ally(block: AllyBuilderBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EntityDSL.kt$EntityBuildersBuilder$fun enemy(block: EnemyBuilderBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EntityDSL.kt$EntityBuildersBuilder$fun placeable(block: PlaceableBuilderBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EntityDSL.kt$EntityListBuilder$fun ally(block: EntityInstanceBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EntityDSL.kt$EntityListBuilder$fun enemy(block: EntityInstanceBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EntityDSL.kt$EntityListBuilder$fun placeable(block: EntityInstanceBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EntityManagerEventListener.kt$EntityManagerEventListener$fun onGameReady(eventReceiver: EntityManagerInteractionReceiver)</ID>
    <ID>UndocumentedPublicFunction:EntityManagerEventListener.kt$EntityManagerEventListener$fun onInteractionRequired( text: String, options: List&lt;InteractiveEventOption>, eventReceiver: EntityManagerInteractionReceiver, )</ID>
    <ID>UndocumentedPublicFunction:EntityManagerEventListener.kt$EntityManagerEventListener$fun onTurnCompleted(eventReceiver: EntityManagerInteractionReceiver)</ID>
    <ID>UndocumentedPublicFunction:EntityManagerInteractionReceiver.kt$EntityManagerInteractionReceiver$fun selectOption(option: InteractiveEventOption?)</ID>
    <ID>UndocumentedPublicFunction:EntityManagerInterface.kt$EntityManagerInterface$fun debugAction(debugAction: DebugAction)</ID>
    <ID>UndocumentedPublicFunction:EntityManagerInterface.kt$EntityManagerInterface$fun runTurns()</ID>
    <ID>UndocumentedPublicFunction:EntityManagerInterface.kt$EntityManagerInterface$fun selectOption(option: InteractiveEventOption?)</ID>
    <ID>UndocumentedPublicFunction:EquippableItemBuilder.kt$EquippableItemBuilder$fun build(entityId: String, posX: Int, posY: Int)</ID>
    <ID>UndocumentedPublicFunction:EventDSL.kt$EventListBuilder$fun changeTrigger(block: ChangeTriggerEventBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EventDSL.kt$EventListBuilder$fun interactive(block: InteractiveEventBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EventDSL.kt$EventListBuilder$fun swapCharacter(block: SwapCharacterInteractiveEventBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EventDSL.kt$InteractiveEventBuilder$fun option(block: InteractiveEventOptionBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:GameMap.kt$GameMap$fun cellAt(posX: Int, posY: Int): Cell</ID>
    <ID>UndocumentedPublicFunction:GameMap.kt$GameMap$fun isBlocked(posX: Int, posY: Int): Boolean</ID>
    <ID>UndocumentedPublicFunction:ItemDSL.kt$ItemBuildersBuilder$fun consumable(block: ConsumableItemBuilderBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ItemDSL.kt$ItemBuildersBuilder$fun equippable(block: EquippableItemBuilderBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ItemDSL.kt$ItemBuildersBuilder$fun keyItem(block: KeyItemBuilderBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ItemDSL.kt$ItemListBuilder$fun consumable(block: ItemInstanceBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ItemDSL.kt$ItemListBuilder$fun equipabble(block: ItemInstanceBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ItemDSL.kt$ItemListBuilder$fun keyItem(block: ItemInstanceBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:KeyItemBuilder.kt$KeyItemBuilder$fun build(entityId: String, posX: Int, posY: Int)</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun add(e: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun element(): T</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun offer(e: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun peek(): T?</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun poll(): T?</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun remove(): T</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun remove(e: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$fun size(): Int</ID>
    <ID>UndocumentedPublicFunction:KotlinPriorityQueue.kt$KotlinPriorityQueue$operator fun contains(e: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:MapLoader.kt$MapLoader$fun loadCSVMap(resourceName: String): Array&lt;Array&lt;Cell>></ID>
    <ID>UndocumentedPublicFunction:Node.kt$Node$fun getCost(): Float</ID>
    <ID>UndocumentedPublicFunction:Node.kt$Node$fun getNeighbours(): List&lt;Node></ID>
    <ID>UndocumentedPublicFunction:Node.kt$Node$fun getX(): Int</ID>
    <ID>UndocumentedPublicFunction:Node.kt$Node$fun getY(): Int</ID>
    <ID>UndocumentedPublicFunction:PlaceableBuilder.kt$PlaceableBuilder$fun build( entityId: String, posX: Int, posY: Int, priority: Int?, enabled: Boolean?, health: Int?, group: String?, ): GameEntity</ID>
    <ID>UndocumentedPublicFunction:Scene.kt$Scene$fun debugAction(action: DebugAction)</ID>
    <ID>UndocumentedPublicFunction:Scene.kt$Scene$fun loadScene(listener: SceneEventsCallback? = null)</ID>
    <ID>UndocumentedPublicFunction:Scene.kt$Scene$fun runTurn(turnAction: TurnActionInterface)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun entity(block: EntityListBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun entityBuilders(block: EntityBuildersBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun events(block: EventListBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun itemBuilders(block: ItemBuildersBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun items(block: ItemListBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun player(block: PlayerBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneConfigDSL.kt$SceneConfigBuilder$fun triggers(block: TriggerListBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:SceneEventsCallback.kt$SceneEventsCallback$fun onCellChanged(cell: Cell)</ID>
    <ID>UndocumentedPublicFunction:SceneEventsCallback.kt$SceneEventsCallback$fun onCharacterChanged(entity: CharacterInterface)</ID>
    <ID>UndocumentedPublicFunction:SceneEventsCallback.kt$SceneEventsCallback$fun onItemChanged(entity: ItemInterface)</ID>
    <ID>UndocumentedPublicFunction:SceneEventsCallback.kt$SceneEventsCallback$fun onSceneEnded(completed: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TransitionStack.kt$TransitionStack$fun executeNewTransition(transition: Transition)</ID>
    <ID>UndocumentedPublicFunction:TransitionStack.kt$TransitionStack$fun fastForwardTurn()</ID>
    <ID>UndocumentedPublicFunction:TransitionStack.kt$TransitionStack$fun rewindTurn()</ID>
    <ID>UndocumentedPublicFunction:TransitionStack.kt$TransitionStack$fun stepBack()</ID>
    <ID>UndocumentedPublicFunction:TransitionStack.kt$TransitionStack$fun stepForward()</ID>
    <ID>UndocumentedPublicFunction:TransitionStack.kt$TransitionStack.TransitionHandler$fun executeTransition(transition: Transition)</ID>
    <ID>UndocumentedPublicFunction:TriggerDSL.kt$TriggerListBuilder$fun cell(block: CellTriggerBuilder.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:TriggerDSL.kt$TriggerListBuilder$fun character(block: CharacterTriggerBuilder.() -> Unit)</ID>
  </CurrentIssues>
</SmellBaseline>
