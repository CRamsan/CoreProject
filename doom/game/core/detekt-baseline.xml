<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>UndocumentedPublicClass:AudioManager.kt$AudioManager$MUSIC</ID>
    <ID>UndocumentedPublicClass:AudioManager.kt$AudioManager$SOUND</ID>
    <ID>UndocumentedPublicClass:CallbackManager.kt$CallbackManager : IGameSubsystem</ID>
    <ID>UndocumentedPublicClass:CallbackManager.kt$CallbackManager$ExecutionBlockInterface</ID>
    <ID>UndocumentedPublicClass:Camera.kt$Camera</ID>
    <ID>UndocumentedPublicClass:Direction.kt$Direction</ID>
    <ID>UndocumentedPublicClass:GameInput.kt$GameInput</ID>
    <ID>UndocumentedPublicClass:GameScreen.kt$GameScreen : BaseScreen</ID>
    <ID>UndocumentedPublicClass:IGameSubsystem.kt$IGameSubsystem</ID>
    <ID>UndocumentedPublicClass:Map.kt$Map</ID>
    <ID>UndocumentedPublicClass:MyGdxGame.kt$MyGdxGame : Game</ID>
    <ID>UndocumentedPublicClass:Player.kt$Player</ID>
    <ID>UndocumentedPublicClass:Point.kt$Point</ID>
    <ID>UndocumentedPublicClass:Projection.kt$Projection</ID>
    <ID>UndocumentedPublicClass:Ray.kt$Ray</ID>
    <ID>UndocumentedPublicClass:SceneManager.kt$SceneManager</ID>
    <ID>UndocumentedPublicClass:SplashScreen.kt$SplashScreen : Screen</ID>
    <ID>UndocumentedPublicClass:SplashScreen.kt$SplashScreen$IResourcesLoaded</ID>
    <ID>UndocumentedPublicClass:Step.kt$Step</ID>
    <ID>UndocumentedPublicFunction:AudioManager.kt$AudioManager$fun PlayMusic()</ID>
    <ID>UndocumentedPublicFunction:AudioManager.kt$AudioManager$fun PlaySound(sound: SOUND?)</ID>
    <ID>UndocumentedPublicFunction:BaseScreen.kt$BaseScreen$// This method will be called to configure objects. This is used to decouple the object initialization // From their configuration in the game world. open fun screenInit()</ID>
    <ID>UndocumentedPublicFunction:CallbackManager.kt$CallbackManager$fun registerEventAtTime(futureTime: Float, block: ExecutionBlockInterface?)</ID>
    <ID>UndocumentedPublicFunction:CallbackManager.kt$CallbackManager$fun registerEventFromNow(waitTime: Float, block: ExecutionBlockInterface?)</ID>
    <ID>UndocumentedPublicFunction:CallbackManager.kt$CallbackManager$fun update(delta: Float)</ID>
    <ID>UndocumentedPublicFunction:CallbackManager.kt$CallbackManager.ExecutionBlockInterface$fun execute()</ID>
    <ID>UndocumentedPublicFunction:Camera.kt$Camera$fun render(player: Player, map: Map)</ID>
    <ID>UndocumentedPublicFunction:Controls.kt$Controls$fun update()</ID>
    <ID>UndocumentedPublicFunction:Direction.kt$Direction$abstract fun angle(): Double</ID>
    <ID>UndocumentedPublicFunction:Direction.kt$Direction$fun turnAround(): Direction</ID>
    <ID>UndocumentedPublicFunction:Direction.kt$Direction$fun turnLeft(): Direction</ID>
    <ID>UndocumentedPublicFunction:Direction.kt$Direction$fun turnRight(): Direction</ID>
    <ID>UndocumentedPublicFunction:Direction.kt$Direction.Companion$fun fromInternalDirection(direction: com.cramsan.awslib.enums.Direction): Direction</ID>
    <ID>UndocumentedPublicFunction:IGameSubsystem.kt$IGameSubsystem$fun OnGameClose()</ID>
    <ID>UndocumentedPublicFunction:IGameSubsystem.kt$IGameSubsystem$fun OnGameLoad()</ID>
    <ID>UndocumentedPublicFunction:IGameSubsystem.kt$IGameSubsystem$fun OnScreenClose()</ID>
    <ID>UndocumentedPublicFunction:IGameSubsystem.kt$IGameSubsystem$fun OnScreenLoad()</ID>
    <ID>UndocumentedPublicFunction:Map.kt$Map$fun cast(point: Point, angle: Double, range: Double): Ray</ID>
    <ID>UndocumentedPublicFunction:Map.kt$Map$fun update()</ID>
    <ID>UndocumentedPublicFunction:Map.kt$Map$operator fun get(px: Double, py: Double): Cell?</ID>
    <ID>UndocumentedPublicFunction:MyGdxGame.kt$MyGdxGame$fun setScreen( newScreen: BaseScreen, isInitialLoad: Boolean, )</ID>
    <ID>UndocumentedPublicFunction:MyGdxGame.kt$MyGdxGame$fun setScreen(newScreen: BaseScreen)</ID>
    <ID>UndocumentedPublicFunction:Player.kt$Player$fun angle(): Double</ID>
    <ID>UndocumentedPublicFunction:Player.kt$Player$fun direction(): Direction</ID>
    <ID>UndocumentedPublicFunction:Player.kt$Player$fun toPoint(): Point</ID>
    <ID>UndocumentedPublicFunction:Player.kt$Player$fun update(delta: Float, gameInput: GameInput)</ID>
    <ID>UndocumentedPublicFunction:SceneManager.kt$SceneManager$@JvmOverloads fun startMainMenuScreen(isInitialLoad: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:SceneManager.kt$SceneManager$@OptIn(DelicateCoroutinesApi::class) fun startGameScreen(newParameterHolder: GameParameterManager?)</ID>
    <ID>UndocumentedPublicFunction:SceneManager.kt$SceneManager$fun clearGame()</ID>
    <ID>UndocumentedPublicFunction:SceneManager.kt$SceneManager$fun getGame(): MyGdxGame?</ID>
    <ID>UndocumentedPublicFunction:SceneManager.kt$SceneManager$fun setGame(game: MyGdxGame?)</ID>
    <ID>UndocumentedPublicFunction:SplashScreen.kt$SplashScreen.IResourcesLoaded$fun onResourcesLoaded()</ID>
    <ID>UndocumentedPublicFunction:UIToolKit.kt$UIToolKit$@OptIn(DelicateCoroutinesApi::class) fun createTextPane( skin: Skin, text: String, options: List&lt;InteractiveEventOption>, eventReceiver: EntityManagerInteractionReceiver, ): Actor</ID>
    <ID>UndocumentedPublicFunction:UIToolKit.kt$UIToolKit$fun createNavigationMenu(skin: Skin): Actor</ID>
  </CurrentIssues>
</SmellBaseline>
