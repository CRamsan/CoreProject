buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$globalAndroidGradlePluginVersion"
    }
}

repositories {
    google()
    jcenter()
}

apply plugin: "com.android.application"

android {
    buildToolsVersion globalAndroidBuildToolsVersion
    compileSdkVersion globalCompileSdkVersion
 
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'

        // Workaround. We need to revisit this issue.
        exclude 'META-INF/library_release.kotlin_module' 
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }
    defaultConfig {
        applicationId "com.cramsan.awsgame"
        minSdkVersion globalMinSdkVersion
        targetSdkVersion globalTargetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    compileOptions {
        sourceCompatibility globalJavaCompatibility
        targetCompatibility globalJavaCompatibility
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations { natives }

dependencies {
    implementation project(":doom:game:core")
    implementation "com.badlogicgames.gdx:gdx-backend-android:$globalGdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$globalGdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$globalGdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$globalGdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$globalGdxVersion:natives-x86_64"
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.cramsan.awsgame/com.cramsan.awsgame.AndroidLauncher'
}
