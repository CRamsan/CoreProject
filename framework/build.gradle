buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$globalAndroidGradlePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$globalKotlinVersion"
    }
}

apply plugin: "com.android.library"
apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "kotlin-kapt"

android {
    buildToolsVersion globalAndroidBuildToolsVersion
    compileSdkVersion globalCompileSdkVersion
    defaultConfig {
        minSdkVersion globalMinSdkVersion
        targetSdkVersion globalTargetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility globalJavaCompatibility
        targetCompatibility globalJavaCompatibility
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                testLogging {
                    events "passed", "skipped", "failed"
                }
            }
        }
    }
}

dependencies {
    implementation packages.Okhttp
    implementation packages.Gson
    implementation packages.AppCenterSdkAnalytics
    implementation packages.AppCenterSdkCrashes

    testImplementation packages.AndroidXJUnitKtx
    testImplementation packages.Mockk
    testImplementation packages.MockkAndroid
    testImplementation packages.JUnit
    testImplementation packages.Robolectric
}

kotlin {
    android("android") {
        compilations.all {
            kotlinOptions {
                jvmTarget = globalJavaCompatibility
            }
        }
    }
    jvm("jvm") {
        compilations.all {
            kotlinOptions {
                jvmTarget = globalJavaCompatibility
            }
        }
    }
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation packages.KotlinStdCommon
            }
        }
        commonTest {
            dependencies {
                implementation packages.KotlinTestCommon
                implementation packages.KotlinTestAnnotations

                implementation packages.MockkCommon
                implementation packages.CoroutinesCore
            }
        }
        jvmMain {
            dependencies {
                implementation packages.KotlinStdJdk8
            }
        }
        jvmTest {
            dependencies {
                implementation packages.KotlinTest
                implementation packages.KotlinTestJunit
                implementation packages.Mockk
                implementation packages.CoroutinesCore
            }
        }
        androidMain {
            dependencies {
                implementation packages.KotlinStdJdk8
            }
        }
        androidTest {
            dependencies {
                implementation packages.KotlinTest
                implementation packages.KotlinTestJunit
                implementation packages.CoroutinesAndroid
            }
        }
        iosMain {
            dependencies {
            }
        }
        iosTest {
            dependencies {
            }
        }
    }
}

tasks {
    jvmTest {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

tasks.register("release") {
    group = 'build'
    description = 'Run all the steps to build a release artifact'

    dependsOn 'ktlint'
    dependsOn 'build'
    dependsOn 'allTests'
}
